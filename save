/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package project.projectSnake;

import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.stage.Stage;

import java.time.Duration;

import javafx.animation.*;
import javafx.scene.image.*;

public class SnakeGame extends Application {
    private float speed = 20;
    private int width = 100;
    private int height = 100;
    private int blockSize = Block.blockSize;
    private boolean gameOvers = false;
    private boolean gamePaused = true;
    private GameField gameField;
    private Scene gameScene;
    private Label score;
    private ImageView myImage;
    String[] nameArray = new String[100];
    String[] pointArray = new String[100];

    @Override
    public void start(Stage stage) {
        try {
            TranslateTransition translate = new TranslateTransition();
            translate.setNode(myImage);
            // translate.setDuration(Duration.minus(1000));
            translate.setCycleCount(TranslateTransition.INDEFINITE);
            translate.setByX(250);
            translate.play();

            // creating score label
            Label scoreLabel = new Label("Score: ");
            // creating score
            score = new Label("0");

            // creating hbox for score
            HBox scoreBox = new HBox();
            scoreBox.setSpacing(20);
            scoreBox.getChildren().addAll(scoreLabel, score);

            // creating view scoreboard
            Button viewScoreboard = new Button("View Scoreboard");
            viewScoreboard.setFocusTraversable(false);
            viewScoreboard.setOnAction(e -> {
                // pause game
                gamePaused = true;

                // create new scene
                // Alert alert = new Alert(Alert.AlertType.NONE);
                // alert.getDialogPane().getButtonTypes().add(ButtonType.CLOSE);
                // alert.setTitle("Scoreboard");
                // alert.setHeaderText("Scoreboard");
                // show 10 highest score
                // alert.setContentText(gameField.getScore().printScoreboard());
                // alert.showAndWait();

                // make borderpane and table view
                TableView<Score> table = new TableView<Score>();

                // make table column
                // TableColumn<Score, Integer> rankColumn = new TableColumn<Score,
                // Integer>("Rank");
                // rankColumn.setCellValueFactory(new PropertyValueFactory<Score,
                // Integer>("rank"));
                TableColumn<Score, String> nameColumn = new TableColumn<Score, String>("Name");
                nameColumn.setCellValueFactory(new PropertyValueFactory<Score, String>("name"));
                TableColumn<Score, Integer> pointColumn = new TableColumn<Score, Integer>("Point");
                pointColumn.setCellValueFactory(new PropertyValueFactory<Score, Integer>("point"));

                // add tablecolumn to table
                // table.getColumns().add(rankColumn);
                table.getColumns().add(nameColumn);
                table.getColumns().add(pointColumn);
                table.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);

                // read scoreboard
                int totalData = gameField.getScore().readScoreBoard(nameArray, pointArray);

                // add data to table
                for (Integer a = 0; a < totalData; a++) {
                    if (a == 10) {
                        break;
                    }
                    table.getItems().add(new Score(a + 1, Integer.parseInt(pointArray[a]), nameArray[a]));
                }

                //make vbox for all of leaderboard
                VBox leaderBoardBox = new VBox();
                leaderBoardBox.setPadding(new Insets(10, 10, 10, 10));
                leaderBoardBox.setSpacing(10);

                //make button for back
                Button buttonBack = new Button("Back");
                buttonBack.setFocusTraversable(false);

                //add table and buttonback to vbox
                leaderBoardBox.getChildren().addAll(table, buttonBack);

                // make a new scene for scoreboard
                Scene scoreScene = new Scene(leaderBoardBox, 500, 500);
                stage.setScene(scoreScene);
                stage.show();

                buttonBack.setOnAction(event -> {
                    System.out.println("jalan");
                });

                // scoreBox.getChildren().addAll(scoreScene);
            });

            // creating game field
            gameField = new GameField(width, height);

            // creating vbox for all
            VBox gameBox = new VBox();
            gameBox.setPadding(new Insets(10, 10, 10, 10));
            gameBox.setSpacing(10);
            gameBox.getChildren().addAll(scoreBox, viewScoreboard, gameField);

            // creating scene
            gameScene = new Scene(gameBox, Color.AQUA);

            // input nama pemain
            Label inputNameLabel = new Label("Input your name: ");
            inputNameLabel.setFont(new Font("Courier New", 15));
            inputNameLabel.setTextFill(Color.YELLOW);
            TextField nameField = new TextField();
            nameField.setPromptText("Name");
            nameField.setFocusTraversable(false);
            nameField.setMaxWidth(100);
            nameField.setBackground(new Background(new BackgroundFill(Color.BLACK, CornerRadii.EMPTY, Insets.EMPTY)));
            nameField.setFont(new Font("Courier New", 12));
            nameField.setStyle(
                    "-fx-text-fill: yellow; -fx-border-color: yellow; -fx-border-width: 1px; -fx-prompt-text-fill: yellow");
            Button submitName = new Button("Submit");
            submitName.setFocusTraversable(false);
            submitName.setBackground(new Background(new BackgroundFill(Color.YELLOW, CornerRadii.EMPTY, Insets.EMPTY)));
            submitName.setFont(new Font("Courier New", 15));
            submitName.setTextFill(Color.BLACK);

            HBox nameBox = new HBox();
            VBox formName = new VBox();
            nameBox.getChildren().addAll(inputNameLabel, nameField);
            formName.getChildren().addAll(nameBox, submitName);
            formName.setSpacing(10);
            formName.alignmentProperty().set(javafx.geometry.Pos.CENTER);
            formName.setTranslateX(width * blockSize / 2 - blockSize * 23);
            formName.setTranslateY(height * blockSize / 2 + blockSize * 10);
            gameField.getChildren().add(formName);

            // submit name
            submitName.setOnAction(e -> {
                // get name
                String name = nameField.getText();
                if (name.equals("")) {
                    name = "Anonymous";
                }
                nameField.setText("");
                // set name
                gameField.getScore().setName(name);
                // remove form
                gameField.getChildren().remove(formName);
                gameField.requestFocus();
            });

            // adding snake
            gameField.addSnake(new Snake(gameField));

            // make snake move
            new AnimationTimer() {
                long lastTick = 0;

                @Override
                public void handle(long now) {

                    if (lastTick == 0) {
                        lastTick = now;
                        if (!gamePaused) {
                            tick(gameField);
                        }
                        return;
                    }

                    if (now - lastTick > 1000000000 / speed) {
                        lastTick = now;
                        if (!gamePaused) {
                            tick(gameField);
                        }
                    }
                }
            }.start();

            // adding movement
            gameField.setOnKeyPressed(e -> {
                // game paused
                if (gamePaused) {
                    if (e.getCode() == KeyCode.SPACE) {
                        if (gameField.getChildren().contains(formName)) {
                            gameField.getScore().setName("Anonymous");
                            gameField.getChildren().remove(formName);
                        }
                        gamePaused = false;
                    }
                }

                // game running / not paused
                if (e.getCode() == KeyCode.UP && gameField.getSnake().getDirection() != Direction.DOWN) {
                    gameField.getSnake().setDirection(Direction.UP);
                } else if (e.getCode() == KeyCode.DOWN && gameField.getSnake().getDirection() != Direction.UP) {
                    gameField.getSnake().setDirection(Direction.DOWN);
                } else if (e.getCode() == KeyCode.LEFT && gameField.getSnake().getDirection() != Direction.RIGHT) {
                    gameField.getSnake().setDirection(Direction.LEFT);
                } else if (e.getCode() == KeyCode.RIGHT && gameField.getSnake().getDirection() != Direction.LEFT) {
                    gameField.getSnake().setDirection(Direction.RIGHT);
                }

                // if game is over
                if (gameOvers) {
                    // add score to scoreboard
                    gameField.getScore().saveToScoreboard();

                    if (e.getCode() == KeyCode.ENTER) {
                        // reset game
                        gameOvers = false;
                        gamePaused = true;
                        gameField.getChildren().clear();
                        gameField.reset(new Snake(gameField));
                        gameField.getChildren().add(formName);
                        score.setText("0");
                    }
                }
            });

            // read movement
            gameField.requestFocus();

            // set stage background
            stage.setScene(gameScene);
            stage.setTitle("Snake");
            stage.setResizable(false);
            stage.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        launch();
    }

    public void tick(GameField gameField) {
        gameOvers = gameField.isGameOver();
        if (!gameOvers) {
            gameField.update();
            score.setText(String.valueOf(gameField.getScore().getPoint()));
        } else {
            // tampilkan game over
            gameField.getChildren().clear();
            Label gameOver = new Label("Game Over");
            gameOver.setFont(new Font("Courier New", 30));
            gameOver.setTextFill(Color.RED);

            // tampilkan score
            Label scoreLabel = new Label("Score: " + gameField.getScore().getPoint());
            scoreLabel.setFont(new Font("Courier New", 20));
            scoreLabel.setTextFill(Color.YELLOW);

            // put in center
            gameOver.setTranslateX(this.width * this.blockSize / 2 - blockSize * 16);
            gameOver.setTranslateY(this.height * this.blockSize / 2 - blockSize * 5);
            scoreLabel.setTranslateX(this.width * this.blockSize / 2 - blockSize * 9);
            scoreLabel.setTranslateY(this.height * this.blockSize / 2 + blockSize * 3);
            gameField.getChildren().addAll(gameOver, scoreLabel);
            return;
        }
    }
}
