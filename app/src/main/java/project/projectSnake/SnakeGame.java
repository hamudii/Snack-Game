/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package project.projectSnake;

import javafx.animation.AnimationTimer;
import javafx.animation.FadeTransition;
import javafx.animation.Interpolator;
import javafx.animation.TranslateTransition;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import java.io.FileInputStream;
import javafx.scene.image.*;

public class SnakeGame extends Application {
    private float speed = 20;
    private int width = 100;
    private int height = 100;
    private int blockSize = Block.blockSize;
    private boolean gameOvers = false;
    private boolean gamePaused = true;
    private GameField gameField;
    private Scene gameScene;
    private Label score;
    private String[] nameArray = new String[100];
    private String[] pointArray = new String[100];
    private String[] levelArray = { "Easy", "Medium", "Hard", "Very Hard", "Crazy" };

    @Override
    public void start(Stage stage) {
        try {

            // makelabel judul
            Label judulLabel = new Label("SNAKE GAME");
            judulLabel.setFont(new Font("Courier New", 30));
            judulLabel.setTextFill(Color.BLACK);

            // set image in hbox and center
            HBox judulBox = new HBox();
            judulBox.setAlignment(Pos.CENTER);
            judulBox.getChildren().add(judulLabel);

            // create an image
            Image image = new Image(new FileInputStream("src/main/resources/snake4.png"));
            ImageView imageView = new ImageView(image);
            imageView.setFitHeight(330);
            imageView.setFitWidth(450);

            // make animation path for imagesnake
            FadeTransition fade = new FadeTransition();
            fade.setNode(imageView);
            // fade.setDuration(Duration.ofMillis(1000));
            fade.setCycleCount(TranslateTransition.INDEFINITE);
            fade.setInterpolator(Interpolator.LINEAR);
            fade.setFromValue(0);
            fade.setToValue(1);
            fade.play();

            // set image in hbox and center
            HBox imageBox = new HBox();
            imageBox.setAlignment(Pos.CENTER);
            imageBox.getChildren().add(imageView);

            // makelabel crator
            Label creatoLabel = new Label("Creator By ");
            creatoLabel.setFont(new Font("Courier New", 12));
            creatoLabel.setTextFill(Color.BLACK);

            // create kreator
            Image creator = new Image(new FileInputStream("src/main/resources/creator.jpeg"));
            ImageView creatorView = new ImageView(creator);
            creatorView.setFitHeight(52);
            creatorView.setFitWidth(50);
            // make animation path for Creator
            FadeTransition fadeCreator = new FadeTransition();
            fadeCreator.setNode(creatorView);
            fadeCreator.setCycleCount(TranslateTransition.INDEFINITE);
            fadeCreator.setInterpolator(Interpolator.LINEAR);
            fadeCreator.setFromValue(0);
            fadeCreator.setToValue(1);
            fadeCreator.play();

            Image creator1 = new Image(new FileInputStream("src/main/resources/creator1.jpeg"));
            ImageView creator1View = new ImageView(creator1);
            creator1View.setFitHeight(43);
            creator1View.setFitWidth(33);

            Image creator2 = new Image(new FileInputStream("src/main/resources/creator2.jpeg"));
            ImageView creator2View = new ImageView(creator2);
            creator2View.setFitHeight(43);
            creator2View.setFitWidth(33);

            Image creator3 = new Image(new FileInputStream("src/main/resources/creator3.jpeg"));
            ImageView creator3View = new ImageView(creator3);
            creator3View.setFitHeight(43);
            creator3View.setFitWidth(33);

            HBox creatorBox = new HBox();
            creatorBox.getChildren().addAll(creator1View, creator2View, creator3View);

            // make a level
            ChoiceBox<String> levelChooseBox = new ChoiceBox<>();
            levelChooseBox.setValue("Choose your level");
            levelChooseBox.getItems().addAll(levelArray);
            levelChooseBox.setOnAction(event -> {
                String level = levelChooseBox.getValue();
                if (level == "Easy") {
                    speed = 20;
                }
                if (level == "Medium") {
                    speed = 60;
                }
                if (level == "Hard") {
                    speed = 180;
                }
                if (level == "Very Hard") {
                    speed = 540;
                }
                if (level == "Crazy") {
                    speed = 1620;
                }
            });

            HBox levelBox = new HBox();
            levelBox.setAlignment(Pos.CENTER);
            levelBox.getChildren().add(levelChooseBox);
            levelBox.setPadding(new Insets(10, 10, 10, 10));

            // make button for start
            Button buttonStart = new Button("Start Game");
            buttonStart.setFocusTraversable(false);
            // set buttonstart in hbox and center
            HBox buttonStartBox = new HBox();
            buttonStartBox.setAlignment(Pos.CENTER);
            buttonStartBox.getChildren().add(buttonStart);
            buttonStartBox.setPadding(new Insets(0, 10, 0, 10));

            // make vbox for all of scene start
            VBox startBox = new VBox();
            startBox.setPadding(new Insets(10, 10, 10, 10));
            startBox.setSpacing(10);
            startBox.setBackground(new Background(new BackgroundFill(Color.GREEN, CornerRadii.EMPTY, Insets.EMPTY)));
            // add image and startbutton to vbox
            startBox.getChildren().addAll(judulBox, imageBox, levelBox, buttonStartBox, creatoLabel, creatorBox);

            // make a new scene for start
            Scene startScene = new Scene(startBox, 500, 575);
            stage.setScene(startScene);
            stage.show();

            // start game
            buttonStart.setOnAction(event -> {

                // creating view scoreboard
                Button buttonScoreboard = new Button("View Scoreboard");
                buttonScoreboard.setFocusTraversable(false);
                buttonScoreboard.setCenterShape(true);
                buttonScoreboard.setAlignment(Pos.CENTER);

                // creating score label and score
                Label scoreLabel = new Label("Score: ");
                score = new Label("0");

                // creating hbox for score
                HBox scoreBox = new HBox();
                scoreBox.setSpacing(20);
                scoreBox.getChildren().addAll(scoreLabel, score);

                // click view scoreboard
                buttonScoreboard.setOnAction(e -> {
                    // pause game
                    gamePaused = true;

                    // make table view
                    TableView<Score> table = new TableView<Score>();

                    // make table column
                    // TableColumn<Score, Integer> rankColumn =
                    // newTableColumn<Score,Integer>("Rank");
                    // rankColumn.setCellValueFactory(newPropertyValueFactory<Score,Integer>("rank"));
                    TableColumn<Score, String> nameColumn = new TableColumn<Score, String>("Name");
                    nameColumn.setCellValueFactory(new PropertyValueFactory<Score, String>("name"));
                    TableColumn<Score, Integer> pointColumn = new TableColumn<Score, Integer>("Point");
                    pointColumn.setCellValueFactory(new PropertyValueFactory<Score, Integer>("point"));

                    // add tablecolumn to table
                    // table.getColumns().add(rankColumn);
                    table.getColumns().add(nameColumn);
                    table.getColumns().add(pointColumn);
                    table.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);

                    // read scoreboard
                    int totalData = gameField.getScore().readScoreBoard(nameArray, pointArray);

                    // add data to table
                    for (Integer a = 0; a < totalData; a++) {
                        if (a == 15) {
                            break;
                        }
                        table.getItems().add(new Score(a + 1, Integer.parseInt(pointArray[a]), nameArray[a]));
                    }

                    // make vbox for all of leaderboard
                    VBox leaderBoardBox = new VBox();
                    leaderBoardBox.setPadding(new Insets(10, 10, 10, 10));
                    leaderBoardBox.setSpacing(10);

                    // make button for back
                    Button buttonBack = new Button("Back");
                    buttonBack.setFocusTraversable(false);

                    // add table and buttonback to vbox
                    leaderBoardBox.getChildren().addAll(table, buttonBack);

                    // make a new scene for scoreboard
                    Scene scoreScene = new Scene(leaderBoardBox, 500, 500);
                    stage.setScene(scoreScene);
                    stage.show();

                    // run the buttonback for back to game
                    buttonBack.setOnAction(ev -> {
                        stage.setScene(gameScene);
                        stage.show();
                    });

                });

                // creating game field
                gameField = new GameField(width, height);

                // creating vbox for all in game
                VBox gameBox = new VBox();
                gameBox.setPadding(new Insets(10, 10, 10, 10));
                gameBox.setSpacing(10);
                gameBox.getChildren().addAll(scoreBox, buttonScoreboard, gameField);

                // creating scene
                gameScene = new Scene(gameBox, Color.AQUA);

                // input player
                Label inputNameLabel = new Label("Input your name: ");
                inputNameLabel.setFont(new Font("Courier New", 15));
                inputNameLabel.setTextFill(Color.YELLOW);
                TextField nameField = new TextField();
                nameField.setPromptText("Name");
                nameField.setFocusTraversable(false);
                nameField.setMaxWidth(100);
                nameField.setBackground(
                        new Background(new BackgroundFill(Color.BLACK, CornerRadii.EMPTY, Insets.EMPTY)));
                nameField.setFont(new Font("Courier New", 12));
                nameField.setStyle(
                        "-fx-text-fill: yellow; -fx-border-color: yellow; -fx-border-width: 1px; -fx-prompt-text-fill: yellow");

                // make button for submit
                Button submitName = new Button("Submit");
                submitName.setFocusTraversable(false);
                submitName.setBackground(
                        new Background(new BackgroundFill(Color.YELLOW, CornerRadii.EMPTY, Insets.EMPTY)));
                submitName.setFont(new Font("Courier New", 15));
                submitName.setTextFill(Color.BLACK);

                // create namebox(hbox) for label and textfield
                HBox nameBox = new HBox();
                nameBox.getChildren().addAll(inputNameLabel, nameField);

                // create formname(vbox) for all of input
                VBox formName = new VBox();
                formName.getChildren().addAll(nameBox, submitName);
                formName.setSpacing(10);
                formName.alignmentProperty().set(javafx.geometry.Pos.CENTER);
                formName.setTranslateX(width * blockSize / 2 - blockSize * 23);
                formName.setTranslateY(height * blockSize / 2 + blockSize * 10);
                gameField.getChildren().add(formName);

                // submit name
                submitName.setOnAction(e -> {
                    // get name
                    String name = nameField.getText();
                    if (name.equals("")) {
                        name = "Anonymous";
                    }
                    nameField.setText("");
                    // set name
                    gameField.getScore().setName(name);
                    // remove form
                    gameField.getChildren().remove(formName);
                    gameField.requestFocus();
                });

                // adding snake
                gameField.addSnake(new Snake(gameField));

                // make snake move
                new AnimationTimer() {
                    long lastTick = 0;

                    @Override
                    public void handle(long now) {

                        if (lastTick == 0) {
                            lastTick = now;
                            if (!gamePaused) {
                                tick(gameField);
                            }
                            return;
                        }

                        if (now - lastTick > 1000000000 / speed) {
                            lastTick = now;
                            if (!gamePaused) {
                                tick(gameField);
                            }
                        }
                    }
                }.start();

                // adding movement
                gameField.setOnKeyPressed(e -> {
                    // game paused
                    if (gamePaused) {
                        if (e.getCode() == KeyCode.SPACE) {
                            if (gameField.getChildren().contains(formName)) {
                                gameField.getScore().setName("Anonymous");
                                gameField.getChildren().remove(formName);
                            }
                            gamePaused = false;
                        }
                    }

                    // game running / not paused
                    if (e.getCode() == KeyCode.UP && gameField.getSnake().getDirection() != Direction.DOWN) {
                        gameField.getSnake().setDirection(Direction.UP);
                    } else if (e.getCode() == KeyCode.DOWN && gameField.getSnake().getDirection() != Direction.UP) {
                        gameField.getSnake().setDirection(Direction.DOWN);
                    } else if (e.getCode() == KeyCode.LEFT && gameField.getSnake().getDirection() != Direction.RIGHT) {
                        gameField.getSnake().setDirection(Direction.LEFT);
                    } else if (e.getCode() == KeyCode.RIGHT && gameField.getSnake().getDirection() != Direction.LEFT) {
                        gameField.getSnake().setDirection(Direction.RIGHT);
                    }

                    // if game is over
                    if (gameOvers) {
                        // add score to scoreboard
                        gameField.getScore().saveToScoreboard();

                        if (e.getCode() == KeyCode.ENTER) {
                            // reset game
                            gameOvers = false;
                            gamePaused = true;
                            gameField.getChildren().clear();
                            gameField.reset(new Snake(gameField));
                            gameField.getChildren().add(formName);
                            score.setText("0");
                        }
                    }
                });

                // read movement
                gameField.requestFocus();

                // set stage background
                stage.setScene(gameScene);
                stage.setTitle("Snake");
                stage.setResizable(false);
                stage.show();
            });
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public static void main(String[] args) {
        launch();
    }

    public void tick(GameField gameField) {
        gameOvers = gameField.isGameOver();
        if (!gameOvers) {
            gameField.update();
            score.setText(String.valueOf(gameField.getScore().getPoint()));
        } else {
            // tampilkan game over
            gameField.getChildren().clear();
            Label gameOver = new Label("Game Over");
            gameOver.setFont(new Font("Courier New", 30));
            gameOver.setTextFill(Color.RED);

            // tampilkan score
            Label scoreLabel = new Label("Score: " + gameField.getScore().getPoint());
            scoreLabel.setFont(new Font("Courier New", 20));
            scoreLabel.setTextFill(Color.YELLOW);

            Label playAgainLabel = new Label("Click ENTER to Play Again");
            playAgainLabel.setFont(new Font("Courier New", 15));
            playAgainLabel.setTextFill(Color.YELLOW);

            // put in center
            gameOver.setTranslateX(this.width * this.blockSize / 2 - blockSize * 16);
            gameOver.setTranslateY(this.height * this.blockSize / 2 - blockSize * 5);
            scoreLabel.setTranslateX(this.width * this.blockSize / 2 - blockSize * 9);
            scoreLabel.setTranslateY(this.height * this.blockSize / 2 + blockSize * 3);
            playAgainLabel.setTranslateX(this.width * this.blockSize / 2 - blockSize * 22);
            playAgainLabel.setTranslateY(this.height * this.blockSize / 2 + blockSize * 11);
            gameField.getChildren().addAll(gameOver, scoreLabel, playAgainLabel);
            return;
        }
    }

}
